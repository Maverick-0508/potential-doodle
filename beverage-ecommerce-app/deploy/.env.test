# Minimal test env for local docker-compose runs
# Not for production. Replace secrets before deploying to prod.

# App
FRONTEND_URL=http://localhost:3000
BACKEND_URL=http://localhost:5000
NEXT_PUBLIC_ENVIRONMENT=testing

# MongoDB (root user credentials used by compose to initialize)
MONGO_ROOT_USERNAME=admin
MONGO_ROOT_PASSWORD=secret
MONGO_INITDB_DATABASE=beverage_ecommerce
MONGO_URI=mongodb://admin:secret@mongodb:27017/beverage_ecommerce?authSource=admin

# JWT / session
JWT_SECRET=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
SESSION_SECRET=abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789

# Redis
REDIS_PASSWORD=testredispass
REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379

# MPESA placeholders (not used in local test but required by compose)
MPESA_CONSUMER_KEY=TEST_CONSUMER_KEY
MPESA_CONSUMER_SECRET=TEST_CONSUMER_SECRET
MPESA_SHORTCODE=123456
MPESA_PASSKEY=TEST_PASSKEY
MPESA_CALLBACK_URL=${FRONTEND_URL}/api/callback/mpesa
MPESA_ENVIRONMENT=sandbox

# Other
BACKEND_PORT=5000
FRONTEND_PORT=3000

# Force seeding (set to true to allow demo/user seeding even in production NODE_ENV for testing)
FORCE_SEED=true

# Demo credentials used by seeders and CI smoke tests
DEMO_EMAIL=demo@beverage.local
DEMO_PASSWORD=demopassword
DEMO_PHONE=254700000000

# Docker compose uses these for mongodb init
MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
